name: Deploy to Cloud Run

env:
  SERVICE_NAME: custom-fastapi-service
  PROJECT_ID: pkdeltaai-06
  DOCKER_IMAGE_URL: us-central1-docker.pkg.dev/pkdeltaai-06/cloudrun-githubaction/custom-fastapi

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dockerize-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Google Cloud Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Create Artifact Registry Repository
        run: |
          if ! gcloud artifacts repositories describe cloudrun-githubaction --location=us-central1 --project=${{ env.PROJECT_ID }}; then
            gcloud artifacts repositories create cloudrun-githubaction \
              --repository-format=docker \
              --location=us-central1 \
              --project=${{ env.PROJECT_ID }}
          else
            echo "Repository already exists"
          fi

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_URL }}:latest -f Dockerfile.prod .
          docker push ${{ env.DOCKER_IMAGE_URL }}:latest

      - name: Deploy to Cloud Run
        run: |
          echo SERVICE_NAME $SERVICE_NAME
          gcloud run deploy $SERVICE_NAME \
            --image ${{ env.DOCKER_IMAGE_URL }}:latest \
            --platform managed \
            --region us-east1 \
            --allow-unauthenticated



      - name: Delete old images from Artifact Registry
        run: |
          # Get the digest of the image currently used by the Cloud Run service
          CURRENT_DIGEST=$(gcloud run services describe $SERVICE_NAME --region us-central1 --format='value(spec.template.spec.containers[0].image)')
          CURRENT_DIGEST=${CURRENT_DIGEST#*@}

          # List all image digests except the one currently in use
          DIGESTS_TO_DELETE=$(gcloud artifacts docker images list ${{ env.DOCKER_IMAGE_URL }} \
            --format='get(digest)' \
            --sort-by=~CREATE_TIME \
            --limit=unlimited \
            | grep -v $CURRENT_DIGEST \
            | tail -n +2)

          # Delete each digest
          for DIGEST in $DIGESTS_TO_DELETE
          do
            echo "Deleting image with digest: $DIGEST"
            gcloud artifacts docker images delete ${{ env.DOCKER_IMAGE_URL }}@$DIGEST --quiet
          done
        continue-on-error: true

          

